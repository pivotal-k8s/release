// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"sync"

	"k8s.io/release/pkg/patch/internal"
)

type FakeRepo struct {
	CurrentBranchStub        func() (string, error)
	currentBranchMutex       sync.RWMutex
	currentBranchArgsForCall []struct {
	}
	currentBranchReturns struct {
		result1 string
		result2 error
	}
	currentBranchReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	HeadStub        func() (string, error)
	headMutex       sync.RWMutex
	headArgsForCall []struct {
	}
	headReturns struct {
		result1 string
		result2 error
	}
	headReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	TagsForBranchStub        func(string) ([]string, error)
	tagsForBranchMutex       sync.RWMutex
	tagsForBranchArgsForCall []struct {
		arg1 string
	}
	tagsForBranchReturns struct {
		result1 []string
		result2 error
	}
	tagsForBranchReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepo) CurrentBranch() (string, error) {
	fake.currentBranchMutex.Lock()
	ret, specificReturn := fake.currentBranchReturnsOnCall[len(fake.currentBranchArgsForCall)]
	fake.currentBranchArgsForCall = append(fake.currentBranchArgsForCall, struct {
	}{})
	fake.recordInvocation("CurrentBranch", []interface{}{})
	fake.currentBranchMutex.Unlock()
	if fake.CurrentBranchStub != nil {
		return fake.CurrentBranchStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.currentBranchReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepo) CurrentBranchCallCount() int {
	fake.currentBranchMutex.RLock()
	defer fake.currentBranchMutex.RUnlock()
	return len(fake.currentBranchArgsForCall)
}

func (fake *FakeRepo) CurrentBranchCalls(stub func() (string, error)) {
	fake.currentBranchMutex.Lock()
	defer fake.currentBranchMutex.Unlock()
	fake.CurrentBranchStub = stub
}

func (fake *FakeRepo) CurrentBranchReturns(result1 string, result2 error) {
	fake.currentBranchMutex.Lock()
	defer fake.currentBranchMutex.Unlock()
	fake.CurrentBranchStub = nil
	fake.currentBranchReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRepo) CurrentBranchReturnsOnCall(i int, result1 string, result2 error) {
	fake.currentBranchMutex.Lock()
	defer fake.currentBranchMutex.Unlock()
	fake.CurrentBranchStub = nil
	if fake.currentBranchReturnsOnCall == nil {
		fake.currentBranchReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.currentBranchReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRepo) Head() (string, error) {
	fake.headMutex.Lock()
	ret, specificReturn := fake.headReturnsOnCall[len(fake.headArgsForCall)]
	fake.headArgsForCall = append(fake.headArgsForCall, struct {
	}{})
	fake.recordInvocation("Head", []interface{}{})
	fake.headMutex.Unlock()
	if fake.HeadStub != nil {
		return fake.HeadStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.headReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepo) HeadCallCount() int {
	fake.headMutex.RLock()
	defer fake.headMutex.RUnlock()
	return len(fake.headArgsForCall)
}

func (fake *FakeRepo) HeadCalls(stub func() (string, error)) {
	fake.headMutex.Lock()
	defer fake.headMutex.Unlock()
	fake.HeadStub = stub
}

func (fake *FakeRepo) HeadReturns(result1 string, result2 error) {
	fake.headMutex.Lock()
	defer fake.headMutex.Unlock()
	fake.HeadStub = nil
	fake.headReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRepo) HeadReturnsOnCall(i int, result1 string, result2 error) {
	fake.headMutex.Lock()
	defer fake.headMutex.Unlock()
	fake.HeadStub = nil
	if fake.headReturnsOnCall == nil {
		fake.headReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.headReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeRepo) TagsForBranch(arg1 string) ([]string, error) {
	fake.tagsForBranchMutex.Lock()
	ret, specificReturn := fake.tagsForBranchReturnsOnCall[len(fake.tagsForBranchArgsForCall)]
	fake.tagsForBranchArgsForCall = append(fake.tagsForBranchArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TagsForBranch", []interface{}{arg1})
	fake.tagsForBranchMutex.Unlock()
	if fake.TagsForBranchStub != nil {
		return fake.TagsForBranchStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tagsForBranchReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepo) TagsForBranchCallCount() int {
	fake.tagsForBranchMutex.RLock()
	defer fake.tagsForBranchMutex.RUnlock()
	return len(fake.tagsForBranchArgsForCall)
}

func (fake *FakeRepo) TagsForBranchCalls(stub func(string) ([]string, error)) {
	fake.tagsForBranchMutex.Lock()
	defer fake.tagsForBranchMutex.Unlock()
	fake.TagsForBranchStub = stub
}

func (fake *FakeRepo) TagsForBranchArgsForCall(i int) string {
	fake.tagsForBranchMutex.RLock()
	defer fake.tagsForBranchMutex.RUnlock()
	argsForCall := fake.tagsForBranchArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRepo) TagsForBranchReturns(result1 []string, result2 error) {
	fake.tagsForBranchMutex.Lock()
	defer fake.tagsForBranchMutex.Unlock()
	fake.TagsForBranchStub = nil
	fake.tagsForBranchReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeRepo) TagsForBranchReturnsOnCall(i int, result1 []string, result2 error) {
	fake.tagsForBranchMutex.Lock()
	defer fake.tagsForBranchMutex.Unlock()
	fake.TagsForBranchStub = nil
	if fake.tagsForBranchReturnsOnCall == nil {
		fake.tagsForBranchReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.tagsForBranchReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.currentBranchMutex.RLock()
	defer fake.currentBranchMutex.RUnlock()
	fake.headMutex.RLock()
	defer fake.headMutex.RUnlock()
	fake.tagsForBranchMutex.RLock()
	defer fake.tagsForBranchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.Repo = new(FakeRepo)
